"""initial

Revision ID: ab33a4deb0ad
Revises: 1178c83c1f63
Create Date: 2025-05-22 16:05:09.977002

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ab33a4deb0ad'
down_revision: Union[str, None] = '1178c83c1f63'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('mbti_traits')
    op.drop_table('personal_info')
    op.drop_table('transactions')
    op.drop_table('group_members')
    op.drop_table('relationship_preferences')
    op.drop_table('tenants')
    op.drop_table('aspiration_and_reflections')
    op.drop_table('values_beliefs_goals')
    op.drop_table('friendship_preferences')
    op.drop_table('journals')
    op.drop_table('intentions')
    op.drop_table('chats')
    op.drop_table('collaboration_preferences')
    op.drop_table('assets')
    op.drop_table('ideal_characteristics')
    op.drop_table('profile_pictures')
    op.drop_table('notifications')
    op.drop_table('api_usage_logs')
    op.drop_table('subscriptions')
    op.drop_table('fb_tokens')
    op.drop_table('interests_hobbies')
    op.drop_table('groups')
    op.drop_table('plans')
    op.drop_table('credit_purchases')
    op.drop_table('favorites')
    op.drop_table('big_five_traits')
    op.drop_table('rate_limit_logs')
    op.drop_table('psychology')
    op.drop_table('personal_free_form')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('personal_free_form',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('things_to_share', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='personal_free_form_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='personal_free_form_pkey')
    )
    op.create_table('psychology',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('communication_style', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('conflict_resolution_style', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('attachment_style', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('emotional_intelligence', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cognitive_style', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('stress_tolerance', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trusting', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('supportive', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('secure', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('anxious', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avoidant', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('interests_visualized', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('values_visualized', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('goals_visualized', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('aspirations_visualized', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='psychology_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='psychology_pkey')
    )
    op.create_table('rate_limit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tenant', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('endpoint_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('requests_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('window_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('window_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='rate_limit_logs_pkey')
    )
    op.create_table('big_five_traits',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('openness', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conscientiousness', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('extraversion', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('agreeableness', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('neuroticism', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='big_five_traits_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='big_five_traits_pkey')
    )
    op.create_table('favorites',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('anecdotes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quotes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('movies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('music', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('art', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('books', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('poems', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('places', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='favorites_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='favorites_pkey')
    )
    op.create_table('credit_purchases',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subscription_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('credits_purchased', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount_paid', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', name='transactionstatus'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subscription_id'], ['subscriptions.id'], name='credit_purchases_subscription_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='credit_purchases_pkey'),
    sa.UniqueConstraint('transaction_id', name='credit_purchases_transaction_id_key')
    )
    op.create_table('plans',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('plans_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('plan_type', postgresql.ENUM('FREE', 'BASIC', 'PREMIUM', 'ENTERPRISE', name='plantype'), autoincrement=False, nullable=False),
    sa.Column('price_monthly', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_yearly', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('credits_included', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_requests_per_minute', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_requests_per_hour', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_requests_per_day', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('features', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='plans_pkey'),
    sa.UniqueConstraint('name', name='plans_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('groups',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('asset_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['user_ai'::character varying, 'users_ai'::character varying, 'group'::character varying]::text[])", name='check_group_type'),
    sa.ForeignKeyConstraint(['asset_url'], ['assets.id'], name='groups_asset_url_fkey'),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='groups_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='groups_pkey'),
    sa.UniqueConstraint('name', name='groups_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('interests_hobbies',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('interests', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('hobbies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='interests_hobbies_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='interests_hobbies_pkey')
    )
    op.create_table('fb_tokens',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['web'::character varying, 'android'::character varying, 'ios'::character varying, 'other'::character varying]::text[])", name='check_fb_token_type'),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='fb_tokens_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='fb_tokens_pkey')
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subscriptions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tenant', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plan', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('credits_remaining', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('credits_used_this_period', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subscription_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('subscription_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_renewal', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plan'], ['plans.id'], name='subscriptions_plan_fkey'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('api_usage_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subscription', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('credits_consumed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('request_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subscription'], ['subscriptions.id'], name='api_usage_logs_subscription_fkey'),
    sa.PrimaryKeyConstraint('id', name='api_usage_logs_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['general'::character varying, 'group'::character varying, 'personal'::character varying, 'system'::character varying, 'social'::character varying, 'event'::character varying]::text[])", name='check_notification_type'),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='notifications_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_table('profile_pictures',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='profile_pictures_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='profile_pictures_pkey')
    )
    op.create_table('ideal_characteristics',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('passionate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('adventurous', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('supportive', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('funny', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reliable', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('open_minded', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('innovative', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dedicated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ethical', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='ideal_characteristics_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='ideal_characteristics_pkey')
    )
    op.create_table('assets',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='assets_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='assets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('collaboration_preferences',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('seeking', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('areas_of_expertise', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('achievements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ideal_collaborator_traits', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='collaboration_preferences_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='collaboration_preferences_pkey')
    )
    op.create_table('chats',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sender', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('receiver', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('group', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('asset_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_url'], ['assets.id'], name='chats_asset_url_fkey'),
    sa.ForeignKeyConstraint(['group'], ['groups.id'], name='chats_group_fkey'),
    sa.ForeignKeyConstraint(['receiver'], ['tenants.id'], name='chats_receiver_fkey'),
    sa.ForeignKeyConstraint(['sender'], ['tenants.id'], name='chats_sender_fkey'),
    sa.PrimaryKeyConstraint('id', name='chats_pkey')
    )
    op.create_table('intentions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('romantic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('social', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('professional', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='intentions_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='intentions_pkey')
    )
    op.create_table('journals',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('media', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='journals_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='journals_pkey')
    )
    op.create_table('friendship_preferences',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('seeking', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('goals', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ideal_traits', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('activities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='friendship_preferences_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='friendship_preferences_pkey')
    )
    op.create_table('values_beliefs_goals',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('beliefs', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('personal_goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('professional_goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('aspirations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='values_beliefs_goals_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='values_beliefs_goals_pkey')
    )
    op.create_table('aspiration_and_reflections',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bucket_list', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('life_goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('greatest_regrets', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('greatest_fears', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='aspiration_and_reflections_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='aspiration_and_reflections_pkey')
    )
    op.create_table('tenants',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('embedding_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    sa.UniqueConstraint('email', name='tenants_email_key'),
    sa.UniqueConstraint('phone', name='tenants_phone_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('relationship_preferences',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('seeking', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('looking_for', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('relationship_goals', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('deal_breakers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('red_flags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('green_flags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('what_i_offer', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('what_i_want', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='relationship_preferences_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='relationship_preferences_pkey')
    )
    op.create_table('group_members',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('group', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("role::text = ANY (ARRAY['member'::character varying, 'admin'::character varying, 'owner'::character varying]::text[])", name='check_member_role'),
    sa.ForeignKeyConstraint(['group'], ['groups.id'], name='group_members_group_fkey'),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='group_members_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='group_members_pkey')
    )
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subscription', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('credits_purchased', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount_paid', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', name='transactionstatus'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subscription'], ['subscriptions.id'], name='transactions_subscription_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('personal_info',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('middle_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('age', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sexual_orientation', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('relationship_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('education', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('occupation', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profile_pictures', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='personal_info_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='personal_info_pkey')
    )
    op.create_table('mbti_traits',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tenant', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('introversion', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('extraversion', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('agreeableness', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('neuroticism', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant'], ['tenants.id'], name='mbti_traits_tenant_fkey'),
    sa.PrimaryKeyConstraint('id', name='mbti_traits_pkey')
    )
    # ### end Alembic commands ###
